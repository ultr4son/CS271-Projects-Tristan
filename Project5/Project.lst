Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/05/17 23:27:58
Random Operations (randop.asm				     Page 1 - 1


				TITLE Random Operations (randop.asm)
				; Program Description: Create a set of n random numbers, sort it, and find the median value
				; Author: Tristan Thompson
				; Creation Date: 2/27/17
				; Revisions:
				; Date: 2/27/17
				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
 = 0000000A			REQUEST_MIN = 10
 = 000000C8			REQUEST_MAX = 200

 = 00000064			RANDOM_MIN = 100
 = 000003E7			RANDOM_MAX = 999

 = 0000000A			NUMS_PER_LINE = 10

 00000000			.data
 00000000 4D 79 20 6E 61	introMessage BYTE "My name is Tristan Thompson and this is Random Operations!",0
	   6D 65 20 69 73
	   20 54 72 69 73
	   74 61 6E 20 54
	   68 6F 6D 70 73
	   6F 6E 20 61 6E
	   64 20 74 68 69
	   73 20 69 73 20
	   52 61 6E 64 6F
	   6D 20 4F 70 65
	   72 61 74 69 6F
	   6E 73 21 00
 0000003B 47 69 76 65 20	requestMessage BYTE "Give me a number of random numbers between 10 and 200: ",0
	   6D 65 20 61 20
	   6E 75 6D 62 65
	   72 20 6F 66 20
	   72 61 6E 64 6F
	   6D 20 6E 75 6D
	   62 65 72 73 20
	   62 65 74 77 65
	   65 6E 20 31 30
	   20 61 6E 64 20
	   32 30 30 3A 20
	   00
 00000073 4E 6F 2C 20 69	errorMessage BYTE "No, idiot!",0
	   64 69 6F 74 21
	   00
 0000007E 55 6E 73 6F 72	arrayUnsortedTitleMessage BYTE "Unsorted numbers:",0
	   74 65 64 20 6E
	   75 6D 62 65 72
	   73 3A 00
 00000090 53 6F 72 74 65	arraySortedTitleMessage BYTE "Sorted numbers:",0
	   64 20 6E 75 6D
	   62 65 72 73 3A
	   00
 000000A0 4D 65 64 69 61	arrayMedianMessage BYTE "Median: ",0
	   6E 3A 20 00
 000000A9 00000000		request DWORD ?
 000000AD  000000C9 [		randomNums DWORD REQUEST_MAX + 1 DUP(?)
	    00000000
	   ]

 000003D1 20 20 20 00		spaces BYTE "   ",0

 00000000			.code
 00000000			main PROC
 00000000  E8 00000070			call introduction
					
 00000005  68 000000A9 R		push OFFSET request
 0000000A  E8 00000078			call getData

 0000000F  FF 35 000000A9 R		push request
 00000015  68 000000AD R		push OFFSET randomNums
 0000001A  E8 000000A2			call fillArray

 0000001F  68 000000AD R		push OFFSET randomNums
 00000024  FF 35 000000A9 R		push request
 0000002A  68 0000007E R		push OFFSET arrayUnsortedTitleMessage
 0000002F  E8 000001AC			call displayList

 00000034  68 000000AD R		push OFFSET randomNums
 00000039  FF 35 000000A9 R		push request
 0000003F  E8 000000C4			call sortList

 00000044  68 000000AD R		push OFFSET randomNums
 00000049  FF 35 000000A9 R		push request
 0000004F  68 00000090 R		push OFFSET arraySortedTitleMessage
 00000054  E8 00000187			call displayList

 00000059  68 000000AD R		push OFFSET randomNums
 0000005E  FF 35 000000A9 R		push request
 00000064  E8 0000012A			call displayMedian

 00000069  E8 00000000 E		call ReadInt
				; (insert executable instructions here)
				exit
 0000006E  6A 00	   *	    push   +000000000h
 00000070  E8 00000000 E   *	    call   ExitProcess
 00000075			main ENDP

				;Write introMessage
 00000075			introduction PROC USES edx
 00000075  52		   *	    push   edx
 00000076  BA 00000000 R		mov edx, OFFSET introMessage
 0000007B  E8 00000000 E		call WriteString
 00000080  E8 00000000 E		call CrLf
					ret
 00000085  5A		   *	    pop    edx
 00000086  C3		   *	    ret    00000h
 00000087			introduction ENDP

				;Get amount of random numbers to calculate
				;Parameters:
				;Request: a reference to a variable that holds the amount of numbers to calculate
 00000087			getData PROC
 00000087  55				push ebp
 00000088  8B EC			mov ebp, esp
 = [ebp + TYPE DWORD * 2]		requestAddr EQU [ebp + TYPE DWORD * 2]
					
 0000008A				requestLoop:
 0000008A  BA 0000003B R			mov edx, OFFSET requestMessage
 0000008F  E8 00000000 E			call WriteString
 00000094  E8 00000000 E			call ReadInt

						;Check for errors
 00000099  83 F8 0A				cmp eax, REQUEST_MIN
 0000009C  7C 09				jl requestError
 0000009E  3D 000000C8				cmp eax, REQUEST_MAX
 000000A3  7F 02				jg requestError

 000000A5  EB 11				jmp requestDone
						
 000000A7					requestError:
 000000A7  BA 00000073 R				mov edx, OFFSET errorMessage
 000000AC  E8 00000000 E				call WriteString
 000000B1  E8 00000000 E				call CrLf
 000000B6  EB D2					jmp requestLoop

 000000B8				requestDone:

					;Store request into given address
 000000B8  8B 75 08			mov esi, requestAddr
 000000BB  89 06			mov [esi], eax
					
 000000BD  5D				pop ebp
 000000BE  C2 0004			ret TYPE DWORD
 000000C1			getData ENDP

				;Fill a given array with random numbers
				;Paramters:
				;Request: the amount of numbers to generate
				;Array: A reference to the array to fill
 000000C1			fillArray PROC 
 000000C1  55				push ebp 
 000000C2  8B EC			mov ebp, esp
 000000C4  83 EC 04			sub esp , TYPE DWORD

 = [ebp - 4]				fills EQU [ebp - 4]
 = [ebp + 12]				paramRequest EQU [ebp + 12]
 = [ebp + 8]				paramArray EQU [ebp + 8]

 000000C7  BE 00000000			mov esi, 0

 000000CC  B8 00000000			mov eax, 0
 000000D1  89 45 FC			mov fills, eax	

 000000D4  8B 5D 08			mov ebx, paramArray

 000000D7  E8 00000000 E		call Randomize

 000000DC				fillLoop:
						;100-999 = 0-899 + 100
 000000DC  B8 00000383				mov eax, RANDOM_MAX - RANDOM_MIN
 000000E1  E8 00000000 E			call RandomRange
 000000E6  83 C0 64				add eax, RANDOM_MIN
						
 000000E9  89 04 33				mov [esi+ebx], eax
						
						;Increment eax and fills
 000000EC  83 C6 04				add esi, TYPE DWORD
 000000EF  8B 45 FC				mov eax, fills
 000000F2  83 C0 01				add eax, 1
 000000F5  89 45 FC				mov fills, eax

 000000F8  8B 45 FC				mov eax, fills
 000000FB  3B 45 0C				cmp eax, paramRequest
 000000FE  7F 02				jg fillDone
 00000100  EB DA				jmp fillLoop

 00000102				fillDone:
 00000102  8B E5			mov esp, ebp
 00000104  5D				pop ebp
					
 00000105  C2 0008			ret TYPE DWORD * 2
 00000108			fillArray ENDP

				;Sort a list
				;Parameters:
				;Array: a reference to the array to sort
				;Request: the size of the array
 00000108			sortList PROC
 00000108  55				push ebp
 00000109  8B EC			mov ebp, esp
 0000010B  83 EC 04			sub esp, 4
 = [ebp - 4]				swapped EQU [ebp - 4]
 = [ebp + 12]				sortArray EQU [ebp + 12]
 = [ebp + 8]				sortRequest EQU [ebp + 8]

					;Make sortRequest in terms of bytes for ease of iteration
 0000010E  8B 45 08			mov eax, sortRequest
 00000111  BB 00000004			mov ebx, TYPE DWORD
 00000116  F7 E3			mul ebx
 00000118  89 45 08			mov sortRequest, eax

 0000011B  B8 00000000			mov eax, 0
 00000120  89 45 FC			mov [swapped], eax

 00000123  8B 75 0C			mov esi, sortArray
					
 00000126				sortLoop:
 00000126  B8 00000004				mov eax, TYPE DWORD ;1st index
 0000012B  BB 00000000				mov ebx, 0 ;0th index
 00000130  BA 00000000				mov edx, 0
 00000135  89 55 FC				mov [swapped], edx
 00000138					sortIteration:
 00000138  8B 14 30					mov edx, [esi + eax]	
 0000013B  3B 14 33					cmp edx, [esi + ebx]
 0000013E  7E 1B					jle iterate

 00000140  BA 00000001					mov edx, 1
 00000145  89 55 FC					mov [swapped], edx

							;Store relevant registers
 00000148  50						push eax
 00000149  53						push ebx

							;Push the position of array[i] and array[i-1]
 0000014A  8B D6					mov edx, esi
 0000014C  03 D0					add edx, eax
 0000014E  52						push edx

 0000014F  8B D6					mov edx, esi
 00000151  03 D3					add edx, ebx
 00000153  52						push edx

 00000154  E8 0000001D					call exchangeElements

							;Restore relevant registers
 00000159  5B						pop ebx
 0000015A  58						pop eax 

 0000015B						iterate:
 0000015B  83 C0 04						add eax, TYPE DWORD
 0000015E  83 C3 04						add ebx, TYPE DWORD
 00000161  3B 45 08						cmp eax, sortRequest
 00000164  7F 02						jg doneIteration
 00000166  EB D0						jmp sortIteration
 00000168							doneIteration:
									;If there were no swaps, then the list is properly sorted.
 00000168  8B 55 FC							mov edx, [swapped]
 0000016B  83 FA 00							cmp edx, 0
 0000016E  7F B6							jg sortLoop
 00000170  8B E5			mov esp, ebp
 00000172  5D				pop ebp
 00000173  C2 0008			ret TYPE DWORD * 2
 00000176			sortList ENDP

				;Exchange two elements in an array
				;Parameters:
				;array[i]: A reference to the ith element to swap
				;array[j]: A reference to the jth element to swap
 00000176			exchangeElements PROC 
 00000176  55				push ebp
 00000177  8B EC			mov ebp, esp
 = [ebp + 12]				arrayI EQU [ebp + 12]
 = [ebp + 8]				arrayJ EQU [ebp + 8]
					
					;save arrayJ
 00000179  8B 45 08			mov eax, arrayJ
 0000017C  8B 00			mov eax, [eax]
 0000017E  50				push eax
					
					;Write arrayI to arrayJ
 0000017F  8B 45 08			mov eax, arrayJ

					;Get the value of arrayI
 00000182  8B 5D 0C			mov ebx, arrayI
 00000185  8B 1B			mov ebx, [ebx]
					
 00000187  89 18			mov [eax], ebx

					;Write araryJ to arrayI
					
					;Get the value of arrayJ
 00000189  5B				pop ebx	
 0000018A  8B 45 0C			mov eax, arrayI
 0000018D  89 18			mov [eax], ebx

 0000018F  5D				pop ebp
 00000190  C2 0008			ret TYPE DWORD * 2
 00000193			exchangeElements ENDP

				;Calculate and display the median of a list.
				;Parameters:
				;Array: the array to calculate on
				;Request: the size of the array
 00000193			displayMedian PROC
 00000193  55				push ebp
 00000194  8B EC			mov ebp, esp
 = [ebp + 12]				medianArray EQU [ebp + 12]
 = [ebp + 8]				medianRequest EQU [ebp + 8]
					
 00000196  8B 75 0C			mov esi, medianArray

 00000199  BA 000000A0 R		mov edx, OFFSET arrayMedianMessage
 0000019E  E8 00000000 E		call WriteString


					;Calculate midpoint in bytes
 000001A3  99				cdq
 000001A4  8B 45 08			mov eax, medianRequest
 000001A7  BB 00000002			mov ebx, 2
 000001AC  F7 F3			div ebx
					
					;eax is off by one due to the way indexes are counted.
 000001AE  48				dec eax 

 000001AF  BB 00000004			mov ebx, TYPE DWORD
 000001B4  F7 E3			mul ebx
					
 000001B6  83 FA 00			cmp edx, 0
 000001B9  7F 16			jg displayOdd

					;if the request is even, we need to take the average of the two values around the midpoint.
 000001BB  8B D8			mov ebx, eax
 000001BD  83 C3 04			add ebx, TYPE DWORD
					
 000001C0  8B 04 30			mov eax, [esi + eax]
 000001C3  8B 1C 33			mov ebx, [esi + ebx]
 000001C6  03 C3			add eax, ebx
 000001C8  BB 00000002			mov ebx, 2
 000001CD  F7 F3			div ebx
 000001CF  EB 06			jmp done

					;if the request is odd, we can directly display the midpoint
 000001D1				displayOdd:
 000001D1  83 C0 04				add eax, TYPE DWORD
 000001D4  8B 04 30				mov eax, [esi + eax]
						
 000001D7				done:
 000001D7  E8 00000000 E		call WriteDec

 000001DC  5B				pop ebx
 000001DD  C2 0008			ret TYPE DWORD * 2
 000001E0			displayMedian ENDP

				;Display a list
				;Parameters:
				;Array: the array to display
				;Request: The amount of elements to display
				;Title: A string reference to a message to display
 000001E0			displayList PROC 
 000001E0  55				push ebp 
 000001E1  8B EC			mov ebp, esp
 000001E3  83 EC 08			sub esp , TYPE DWORD * 2

 = [ebp - TYPE DWORD]			displays EQU [ebp - TYPE DWORD]
 = [ebp - TYPE DWORD * 2]		lineDisplays EQU [ebp - TYPE DWORD * 2]

 = [ebp + 16]			 	paramArrayDisplay EQU [ebp + 16]
 = [ebp + 12]				paramDisplayAmount EQU [ebp + 12]
 = [ebp + 8]				paramArrayTitle EQU [ebp + 8]

 000001E6  B8 00000000			mov eax, 0
 000001EB  89 45 FC			mov displays, eax
 000001EE  89 45 F8			mov lineDisplays, eax

 000001F1  8B 55 08			mov edx, paramArrayTitle
 000001F4  E8 00000000 E		call WriteString
 000001F9  E8 00000000 E		call CrLf

 000001FE  8B 4D 0C			mov ecx, paramDisplayAmount

 00000201  BB 00000000			mov ebx, 0
 00000206  8B 75 10			mov esi, paramArrayDisplay

 00000209				displayLoop:	

						;Write current element
 00000209  8B 04 33				mov eax, [esi + ebx]
 0000020C  E8 00000000 E			call WriteDec

 00000211  BA 000003D1 R			mov edx, OFFSET spaces
 00000216  E8 00000000 E			call WriteString
						
						;Increment index and count

 0000021B  8B 45 FC				mov eax, displays
 0000021E  83 C0 01				add eax, 1
 00000221  89 45 FC				mov displays, eax

 00000224  83 C3 04				add ebx, 4

						;Increment line displays and check if at limit
 00000227  8B 45 F8				mov eax, lineDisplays
 0000022A  83 C0 01				add eax, 1
 0000022D  89 45 F8				mov lineDisplays, eax

 00000230  83 F8 0A				cmp eax, NUMS_PER_LINE
 00000233  7C 0D				jl checkDone
						
 00000235  E8 00000000 E			call CrLf
 0000023A  B8 00000000				mov eax, 0
 0000023F  89 45 F8				mov lineDisplays, eax

 00000242					checkDone:
 00000242  8B 45 FC					mov eax, displays
 00000245  3B C1					cmp eax, ecx
 00000247  74 02					je displayLoopDone
 00000249  EB BE					jmp displayLoop
 0000024B				displayLoopDone:
 0000024B  E8 00000000 E		call CrLf

 00000250  8B E5			mov esp, ebp
 00000252  5D				pop ebp
 00000253  C2 000C			ret TYPE DWORD * 3
 00000256			displayList ENDP


				; (insert additional procedures here)
				END main
Microsoft (R) Macro Assembler Version 14.00.24210.0	    03/05/17 23:27:58
Random Operations (randop.asm				     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000003D5 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000256 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
displayList  . . . . . . . . . .	P Near	 000001E0 _TEXT	Length= 00000076 Public STDCALL
  displayLoop  . . . . . . . . .	L Near	 00000209 _TEXT	
  checkDone  . . . . . . . . . .	L Near	 00000242 _TEXT	
  displayLoopDone  . . . . . . .	L Near	 0000024B _TEXT	
displayMedian  . . . . . . . . .	P Near	 00000193 _TEXT	Length= 0000004D Public STDCALL
  displayOdd . . . . . . . . . .	L Near	 000001D1 _TEXT	
  done . . . . . . . . . . . . .	L Near	 000001D7 _TEXT	
exchangeElements . . . . . . . .	P Near	 00000176 _TEXT	Length= 0000001D Public STDCALL
fillArray  . . . . . . . . . . .	P Near	 000000C1 _TEXT	Length= 00000047 Public STDCALL
  fillLoop . . . . . . . . . . .	L Near	 000000DC _TEXT	
  fillDone . . . . . . . . . . .	L Near	 00000102 _TEXT	
getData  . . . . . . . . . . . .	P Near	 00000087 _TEXT	Length= 0000003A Public STDCALL
  requestLoop  . . . . . . . . .	L Near	 0000008A _TEXT	
  requestError . . . . . . . . .	L Near	 000000A7 _TEXT	
  requestDone  . . . . . . . . .	L Near	 000000B8 _TEXT	
introduction . . . . . . . . . .	P Near	 00000075 _TEXT	Length= 00000012 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000075 Public STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
sortList . . . . . . . . . . . .	P Near	 00000108 _TEXT	Length= 0000006E Public STDCALL
  sortLoop . . . . . . . . . . .	L Near	 00000126 _TEXT	
  sortIteration  . . . . . . . .	L Near	 00000138 _TEXT	
  iterate  . . . . . . . . . . .	L Near	 0000015B _TEXT	
  doneIteration  . . . . . . . .	L Near	 00000168 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
NUMS_PER_LINE  . . . . . . . . .	Number	 0000000Ah   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RANDOM_MAX . . . . . . . . . . .	Number	 000003E7h   
RANDOM_MIN . . . . . . . . . . .	Number	 00000064h   
REQUEST_MAX  . . . . . . . . . .	Number	 000000C8h   
REQUEST_MIN  . . . . . . . . . .	Number	 0000000Ah   
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
arrayI . . . . . . . . . . . . .	Text   	 [ebp + 12]
arrayJ . . . . . . . . . . . . .	Text   	 [ebp + 8]
arrayMedianMessage . . . . . . .	Byte	 000000A0 _DATA	
arraySortedTitleMessage  . . . .	Byte	 00000090 _DATA	
arrayUnsortedTitleMessage  . . .	Byte	 0000007E _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
displays . . . . . . . . . . . .	Text   	 [ebp - TYPE DWORD]
errorMessage . . . . . . . . . .	Byte	 00000073 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
fills  . . . . . . . . . . . . .	Text   	 [ebp - 4]
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
introMessage . . . . . . . . . .	Byte	 00000000 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
lineDisplays . . . . . . . . . .	Text   	 [ebp - TYPE DWORD * 2]
magenta  . . . . . . . . . . . .	Number	 00000005h   
medianArray  . . . . . . . . . .	Text   	 [ebp + 12]
medianRequest  . . . . . . . . .	Text   	 [ebp + 8]
paramArrayDisplay  . . . . . . .	Text   	 [ebp + 16]
paramArrayTitle  . . . . . . . .	Text   	 [ebp + 8]
paramArray . . . . . . . . . . .	Text   	 [ebp + 8]
paramDisplayAmount . . . . . . .	Text   	 [ebp + 12]
paramRequest . . . . . . . . . .	Text   	 [ebp + 12]
randomNums . . . . . . . . . . .	DWord	 000000AD _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
requestAddr  . . . . . . . . . .	Text   	 [ebp + TYPE DWORD * 2]
requestMessage . . . . . . . . .	Byte	 0000003B _DATA	
request  . . . . . . . . . . . .	DWord	 000000A9 _DATA	
sortArray  . . . . . . . . . . .	Text   	 [ebp + 12]
sortRequest  . . . . . . . . . .	Text   	 [ebp + 8]
spaces . . . . . . . . . . . . .	Byte	 000003D1 _DATA	
swapped  . . . . . . . . . . . .	Text   	 [ebp - 4]
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
